# -*- coding: utf-8 -*-

import time

from osmapi import (
    OsmApi, OsmApiError, ApiError,
    ResponseEmptyApiError, ElementDeletedApiError)
from requests_oauthlib import OAuth1

from core.settings.secret import (
    SOCIAL_AUTH_OPENSTREETMAP_KEY, SOCIAL_AUTH_OPENSTREETMAP_SECRET)


class OAuthTokenMissingError(OsmApiError):
    """
    Error when oauth token is missing for an authenticated request
    """
    pass


class WrappedOsmApi(OsmApi):

    def __init__(self, oauth_token, oauth_token_secret, api, appid):
        """Wrapped OsmApi object constructor.
        """
        super(WrappedOsmApi, self).__init__(api=api, appid=appid)
        self.oauth_token = oauth_token
        self.oauth_token_secret = oauth_token_secret

    def _http_request(self, method, path, auth, send, return_value=True):
        """
        Returns the response generated by an HTTP request.
        `method` is a HTTP method to be executed
        with the request data. For example: 'GET' or 'POST'.
        `path` is the path to the requested resource relative to the
        base API address stored in self._api. Should start with a
        slash character to separate the URL.
        `auth` is a boolean indicating whether authentication should
        be preformed on this request.
        `send` contains additional data that might be sent in a
        request.
        `return_value` indicates whether this request should return
        any data or not.
        If the oauth token is missing,
        `OAuthTokenMissingError` is raised.
        If the requested element has been deleted,
        `OsmApi.ElementDeletedApiError` is raised.
        If the response status code indicates an error,
        `OsmApi.ApiError` is raised.
        """
        if self._debug:
            error_msg = (
                "%s %s %s"
                % (time.strftime("%Y-%m-%d %H:%M:%S"), method, path)
            )
            print(error_msg)

        # Add API base URL to path
        path = self._api + path

        user_credentials = None
        if auth:
            try:
                user_credentials = OAuth1(
                    client_key=SOCIAL_AUTH_OPENSTREETMAP_KEY,
                    client_secret=SOCIAL_AUTH_OPENSTREETMAP_SECRET,
                    resource_owner_key=self.oauth_token,
                    resource_owner_secret=self.oauth_token_secret,
                )
            except AttributeError:
                raise OAuthTokenMissingError("OAuth token missing")

        response = self._session.request(method, path, auth=user_credentials,
                                         data=send)
        if response.status_code != 200:
            payload = response.content.strip()
            if response.status_code == 410:
                raise ElementDeletedApiError(
                    response.status_code,
                    response.reason,
                    payload
                )
            raise ApiError(response.status_code, response.reason, payload)
        if return_value and not response.content:
            raise ResponseEmptyApiError(
                response.status_code,
                response.reason,
                ''
            )

        if self._debug:
            error_msg = (
                "%s %s %s"
                % (time.strftime("%Y-%m-%d %H:%M:%S"), method, path)
            )
            print(error_msg)
        return response.content
